{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient, userAuthService) {\n      this.httpClient = httpClient;\n      this.userAuthService = userAuthService;\n      this.PATH_API = \"http://localhost:8080\";\n      this.requestHeader = new HttpHeaders({\n        \"No-Auth\": \"True\"\n      });\n    }\n    getAllUsers() {\n      return this.httpClient.get(this.PATH_API + \"/allUser\");\n    }\n    //this.httpClient.post(here url to api be called)\n    login(LoginData) {\n      return this.httpClient.post(this.PATH_API + \"/authenticate\", LoginData, {\n        headers: this.requestHeader\n      });\n    }\n    forCustomer() {\n      return this.httpClient.get(this.PATH_API + '/forCustomer', {\n        responseType: 'text'\n      });\n    }\n    forAdmin() {\n      return this.httpClient.get(this.PATH_API + '/forAdmin', {\n        responseType: 'text'\n      });\n    }\n    forManager() {\n      return this.httpClient.get(this.PATH_API + '/forManager', {\n        responseType: 'text'\n      });\n    }\n    forEngineer() {\n      return this.httpClient.get(this.PATH_API + '/forEngineer', {\n        responseType: 'text'\n      });\n    }\n    //roleMatch(allowedRoles) allowedRoles(roles specified to user in db)--> will be matched with actual roles-->stored in datastorage if matched-->return isMatch true\n    roleMatch(allowedRoles) {\n      let isMatch = false;\n      const userRoles = this.userAuthService.getRoles();\n      if (userRoles != null && userRoles) {\n        for (let i = 0; i < userRoles.length; i++) {\n          for (let j = 0; j < allowedRoles.length; j++) {\n            if (userRoles[i].roleName == allowedRoles[j]) {\n              isMatch = true;\n              return isMatch;\n            } else {\n              return isMatch;\n            }\n          }\n        }\n      }\n    }\n    //for new customer registration open to all\n    customerRegister(registerData) {\n      return this.httpClient.post(this.PATH_API + '/registerNewCustomer', registerData);\n    }\n    //for new engineer registration only allowed fro admin\n    engineerRegister(registerData) {\n      return this.httpClient.post(this.PATH_API + '/registerNewEngineer', registerData);\n    }\n    //for new manager registration only allowed for admin\n    managerRegister(registerData) {\n      return this.httpClient.post(this.PATH_API + '/registerNewManager', registerData);\n    }\n    deleteUser(userName) {\n      return this.httpClient.delete(this.PATH_API + '/deleteUser/' + userName);\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}