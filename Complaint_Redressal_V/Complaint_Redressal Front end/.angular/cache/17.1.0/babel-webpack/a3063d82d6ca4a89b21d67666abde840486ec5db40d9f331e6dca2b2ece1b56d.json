{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(userAuthService, router) {\n      this.userAuthService = userAuthService;\n      this.router = router;\n    }\n    //this will create a header with jwt token and send it to the baceknd\n    intercept(req, next) {\n      // throw new Error(\"Method not implemented.\")\n      if (req.headers.get('No-Auth') === 'True') {\n        return next.handle(req.clone());\n      }\n      const token = this.userAuthService.getToken(); //getToken is ins user.auth.ts which gets token from local storage and passs it to interceptor, if we do not enter anything it will send nothing\n      //req = this.addToken(req,token); this addToken function will add token value in the header even if it is nul hence we need to add a null condition as well.\n      if (token) {\n        req = this.addToken(req, token);\n      }\n      //with thid if conditn it will addToken only when some token value is present.\n      console.log(req); // will print req in console\n      //through following code we are going to backend taking the token within\n      return next.handle(req).pipe(catchError(err => {\n        console.log(err.status);\n        if (err.status == 401) {\n          this.router.navigate(['/login']);\n        } else if (err.status == 403) {\n          this.router.navigate(['/forbidden']);\n        }\n        return throwError(\"Something went wrong\");\n      }));\n    }\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}